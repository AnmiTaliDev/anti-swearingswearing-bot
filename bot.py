import logging
import re
import asyncio
from aiogram import Bot, Dispatcher, types

# –ó–∞–º–µ–Ω–∏—Ç–µ "YOUR_TELEGRAM_BOT_TOKEN" –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
WORDS_FILE = "words.txt"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_banned_patterns():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ WORDS_FILE –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è wildcard —Å–∏–º–≤–æ–ª—ã: —Å–∏–º–≤–æ–ª '*' –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ '.*' –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª—é–±—ã–º —Å–∏–º–≤–æ–ª–∞–º.
    """
    patterns = []
    try:
        with open(WORDS_FILE, "r", encoding="utf-8") as f:
            for line in f:
                word = line.strip()
                if word and not word.startswith("#"):
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –∑–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º '*' –Ω–∞ '.*'
                    regex_pattern = re.escape(word).replace(r"\*", ".*")
                    patterns.append(re.compile(regex_pattern, re.IGNORECASE))
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ '%s': %s", WORDS_FILE, e)
    return patterns

banned_patterns = load_banned_patterns()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (aiogram v3)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message()
async def moderate_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —à–∞–±–ª–æ–Ω—ã, –±–æ—Ç:
    1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏.
    2. –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ë–æ—Ç –Ω–µ –±–∞–Ω–∏—Ç –∏ –Ω–µ –º—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    text = message.text
    if text:
        for pattern in banned_patterns:
            if pattern.search(text):
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username –∏–ª–∏ first_name
                    user = message.from_user.username if message.from_user and message.from_user.username else message.from_user.first_name
                    response_text = f"üö´ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user} –∑–∞ –º–∞—Ç üò°"
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
                    await bot.send_message(chat_id=message.chat.id, text=response_text)
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await message.delete()
                    logger.info("–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ %s –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (username: %s) –ø–æ —à–∞–±–ª–æ–Ω—É '%s'",
                                message.message_id,
                                message.from_user.id if message.from_user else "Unknown",
                                user,
                                pattern.pattern)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %s: %s", message.message_id, e)
                break

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())